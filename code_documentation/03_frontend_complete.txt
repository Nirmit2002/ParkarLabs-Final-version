FRONTEND CODE DOCUMENTATION
===========================

========================================
FRONTEND CONFIGURATION FILES
========================================

--- package.json ---

{
  "name": "parkarlabs-frontend",
  "version": "1.0.0",
  "description": "ParkarLabs Frontend - Next.js Application",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "autoprefixer": "^10.4.16",
    "axios": "^1.6.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "lucide-react": "^0.294.0",
    "next": "14.0.3",
    "postcss": "^8.4.32",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.48.2",
    "react-hot-toast": "^2.4.1",
    "react-query": "^3.39.3",
    "tailwindcss": "^3.3.6",
    "xterm": "^5.3.0",
    "xterm-addon-fit": "^0.8.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.42",
    "@types/react-dom": "^18.2.17",
    "eslint": "^8.55.0",
    "eslint-config-next": "14.0.3"
  }
}

--- next.config.js ---

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,

  // API configuration for backend connection
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:5000/api/:path*', // Backend API URL
      },
    ];
  },

  // Environment variables for client side
  env: {
    BACKEND_URL: process.env.BACKEND_URL || 'http://localhost:5000',
    APP_NAME: 'ParkarLabs',
    APP_VERSION: '1.0.0',
  },

  // Image optimization
  images: {
    domains: ['localhost'],
  },

  // Build configuration
  output: 'standalone',
};

module.exports = nextConfig;

--- tailwind.config.js ---

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        // ParkarLabs Brand Colors
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
          950: '#082f49',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
          950: '#020617',
        },
        success: {
          50: '#f0fdf4',
          500: '#10b981',
          700: '#047857',
        },
        warning: {
          50: '#fffbeb',
          500: '#f59e0b',
          700: '#d97706',
        },
        error: {
          50: '#fef2f2',
          500: '#ef4444',
          700: '#dc2626',
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'monospace'],
      },
      boxShadow: {
        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',
        'medium': '0 4px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
        'strong': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'pulse-soft': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        }
      }
    },
  },
  plugins: [],
}

========================================
PAGES - ROOT LEVEL
========================================


--- _app.js ---

// pages/_app.js
import '../styles/globals.css'

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

export default MyApp

--- index.js ---

// pages/index.js
import Head from 'next/head';
import Link from 'next/link';

export default function Home() {
  return (
    <>
      <Head>
        <title>ParkarLabs - Personal Lab Environment</title>
        <meta
          name="description"
          content="Revolutionize learning with ParkarLabs - Your personal cloud-based lab environment"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          href="https://cdn.prod.website-files.com/66fa50f0631f1401a2a41200/6756dfa69388c348de24fe50_Fav%20Icon.png"
        />
      </Head>

      <div className="bg-[#0a0e27] text-white font-sans min-h-screen">
        {/* Navbar */}
        <nav className="flex justify-between items-center px-4 sm:px-8 md:px-16 lg:px-20 xl:px-32 py-4 border-b border-gray-700">
          <h1 className="text-xl md:text-2xl font-bold text-white">
            Parkar<span className="text-blue-500">Labs</span>
          </h1>
          <Link
            href="/auth/login"
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded transition-colors duration-200"
          >
            Login
          </Link>
        </nav>

        {/* Hero Section */}
        <section className="px-4 sm:px-8 md:px-16 lg:px-20 xl:px-32 py-16 lg:py-20">
          <div className="flex flex-col lg:flex-row items-center gap-12 lg:gap-20">
            {/* Text Content */}
            <div className="flex-1 lg:max-w-xl xl:max-w-2xl">
              <h2 className="text-4xl lg:text-5xl xl:text-6xl font-bold mb-6 leading-tight">
                Revolutionize <span className="text-blue-500">Learning</span>
                <br />
                with ParkarLabs
              </h2>
              <p className="text-lg xl:text-xl text-gray-300 mb-8 leading-relaxed">
                Log in to access hands-on labs, explore real-world scenarios, and
                build practical skills. Everything you need—right in your browser.
              </p>
              <Link
                href="/auth/login"
                className="inline-block bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg transition-colors duration-200 font-semibold text-lg"
              >
                Get Started
              </Link>
            </div>

            {/* Hero Image */}
            <div className="flex-1 flex justify-center lg:justify-end">
              <img
                src="/images/representation-user-experience-interface-design-min.jpg"
                alt="ParkarLabs Interface Design"
                className="rounded-lg shadow-2xl w-full max-w-sm lg:max-w-md xl:max-w-lg h-72 lg:h-80 object-cover transition-transform duration-300 hover:scale-105"
              />
            </div>
          </div>
        </section>

        {/* Lab Environment Section */}
        <section className="bg-gray-900/30 py-16 lg:py-20">
          <div className="px-4 sm:px-8 md:px-16 lg:px-20 xl:px-32">
            <div className="flex flex-col lg:flex-row items-center gap-12 lg:gap-20">
              {/* Lab Image */}
              <div className="flex-1 flex justify-center lg:justify-start order-2 lg:order-1">
                <img
                  src="/images/innovative-futuristic-classroom-students-min.jpg"
                  alt="Futuristic Lab Environment"
                  className="rounded-lg shadow-2xl w-full max-w-sm lg:max-w-md xl:max-w-lg h-72 lg:h-80 object-cover transition-transform duration-300 hover:scale-105"
                />
              </div>

              {/* Content */}
              <div className="flex-1 lg:max-w-xl xl:max-w-2xl order-1 lg:order-2">
                <h3 className="text-4xl lg:text-5xl font-bold text-white mb-6">
                  Your Personal Lab Environment
                </h3>
                <p className="text-gray-300 text-lg xl:text-xl mb-8 leading-relaxed">
                  ParkarLabs provides a secure, cloud-based personal lab environment
                  where you can practice and perfect your technical skills. Our platform is
                  designed for learners and professionals who need hands-on experience with real-world
                  scenarios.
                </p>

                {/* Features List */}
                <ul className="space-y-4 mb-8">
                  <li className="flex items-start space-x-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <span className="text-white">Create and manage virtual machines with just a few clicks</span>
                  </li>
                  <li className="flex items-start space-x-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <span className="text-white">Access pre-configured environments for various technologies</span>
                  </li>
                  <li className="flex items-start space-x-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <span className="text-white">Complete hands-on tasks and projects in a safe, isolated environment</span>
                  </li>
                  <li className="flex items-start space-x-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                    <span className="text-white">Track your progress and save your work for future sessions</span>
                  </li>
                </ul>

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-4">
                  <Link href="/auth/login">
                    <button className="bg-blue-600 hover:bg-blue-700 px-8 py-3 rounded-lg text-white transition-colors duration-200 font-semibold">
                      Start Your Lab
                    </button>
                  </Link>
                  <button className="bg-transparent border-2 border-blue-500 hover:bg-blue-600 px-8 py-3 rounded-lg text-blue-400 hover:text-white transition-all duration-200 font-semibold">
                    Learn More
                  </button>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Life at Parkar Section */}
        <section className="py-16 lg:py-20">
          <div className="px-4 sm:px-8 md:px-16 lg:px-20 xl:px-32">
            {/* Centered Heading + Paragraph */}
            <div className="mb-16 text-center max-w-3xl mx-auto">
              <h3 className="text-4xl lg:text-5xl font-bold text-white mb-4">
                Life at Parkar
              </h3>
              <p className="text-gray-400 text-lg xl:text-xl leading-relaxed">
                Experience the vibrant culture and innovative environment that makes
                ParkarLabs a great place to work and learn.
              </p>
            </div>

            {/* Image Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="overflow-hidden rounded-lg shadow-lg">
                <img
                  src="/images/DSC_7009-min.jpg"
                  alt="Team collaboration at ParkarLabs"
                  className="w-full h-64 object-cover transition-transform duration-300 hover:scale-110"
                />
              </div>
              <div className="overflow-hidden rounded-lg shadow-lg">
                <img
                  src="/images/DSC_7050-min.jpg"
                  alt="Innovation and teamwork"
                  className="w-full h-64 object-cover transition-transform duration-300 hover:scale-110"
                />
              </div>
              <div className="overflow-hidden rounded-lg shadow-lg">
                <img
                  src="/images/DSC_7104-min.jpg"
                  alt="Learning environment"
                  className="w-full h-64 object-cover transition-transform duration-300 hover:scale-110"
                />
              </div>
              <div className="overflow-hidden rounded-lg shadow-lg">
                <img
                  src="/images/DSC_7292-min.jpg"
                  alt="Professional growth"
                  className="w-full h-64 object-cover transition-transform duration-300 hover:scale-110"
                />
              </div>
            </div>
          </div>
        </section>

        {/* Footer */}
        <footer className="border-t border-gray-700 py-8">
          <div className="px-4 sm:px-8 md:px-16 lg:px-20 xl:px-32 text-center">
            <p className="text-blue-500 font-semibold text-xl mb-2">ParkarLabs</p>
            <p className="text-gray-500 text-sm">© 2025 ParkarLabs. All rights reserved.</p>
          </div>
        </footer>
      </div>
    </>
  );
}

========================================
PAGES - AUTH
========================================


--- auth/login.js ---

// pages/auth/login.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import axios from 'axios';

export default function Login() {
  const router = useRouter();
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Check if user is already logged in
  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      verifyToken(token);
    }
  }, []);

  const verifyToken = async (token) => {
    try {
      const response = await axios.get('/api/auth/verify', {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (response.data.success) {
        redirectBasedOnRole(response.data.user.role);
      }
    } catch (error) {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
    }
  };

  const redirectBasedOnRole = (role) => {
    switch (role) {
      case 'admin':
        router.push('/admin/dashboard');
        break;
      case 'manager':
        router.push('/admin/dashboard');
        break;
      case 'employee':
        router.push('/user/dashboard');
        break;
      default:
        router.push('/user/dashboard');
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    if (error) setError('');
    if (success) setSuccess('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    if (isLogin) {
      // Login
      try {
        const response = await axios.post('/api/auth/login', {
          email: formData.email,
          password: formData.password
        });

        if (response.data.success) {
          localStorage.setItem('token', response.data.data.token);
          localStorage.setItem('user', JSON.stringify(response.data.data.user));

          setSuccess('Login successful! Redirecting...');
          setTimeout(() => {
            redirectBasedOnRole(response.data.data.user.role);
          }, 1000);
        }
      } catch (error) {
        console.error('Login error:', error);
        setError(
          error.response?.data?.message ||
          'Login failed. Please check your credentials.'
        );
      }
    } else {
      // Registration
      if (formData.password !== formData.confirmPassword) {
        setError('Passwords do not match');
        setLoading(false);
        return;
      }

      try {
        const response = await axios.post('/api/auth/register', {
          name: formData.name,
          email: formData.email,
          password: formData.password,
          confirmPassword: formData.confirmPassword
        });

        if (response.data.success) {
          setSuccess('Account created successfully! Please login.');
          // Switch to login form and clear form data
          setTimeout(() => {
            setIsLogin(true);
            setFormData({
              name: '',
              email: formData.email, // Keep email for convenience
              password: '',
              confirmPassword: ''
            });
            setSuccess('');
          }, 2000);
        }
      } catch (error) {
        console.error('Registration error:', error);
        setError(
          error.response?.data?.message ||
          'Registration failed. Please try again.'
        );
      }
    }
    setLoading(false);
  };

  return (
    <>
      <Head>
        {/* Single text node in title to avoid array children warning */}
        <title>{isLogin ? 'Login - ParkarLabs' : 'Sign Up - ParkarLabs'}</title>
        <meta name="description" content={isLogin ? 'Sign in to ParkarLabs platform' : 'Create your ParkarLabs account'} />
      </Head>

      <div className="min-h-screen bg-white font-sans">
        <div className="flex min-h-screen">
          {/* Left Side - Blue Section */}
          <div className="flex-1 bg-[#0a0e27] text-white flex items-center justify-center px-8 lg:px-16">
            <div className="max-w-lg">
              <h1 className="text-4xl font-bold mb-6 leading-tight">
                Welcome to <span className="text-blue-500">ParkarLabs</span>
              </h1>
              <p className="text-lg text-gray-300 mb-8">
                Empowering digital transformation with innovative solutions and unparalleled expertise.
                Discover how Parkar Labs is reshaping industries through cutting-edge technology.
              </p>
              <div className="space-y-6">
                <div className="flex items-start gap-4">
                  <div className="text-2xl">🚀</div>
                  <div>
                    <h3 className="text-xl font-semibold mb-2">Cloud Labs</h3>
                    <p className="text-gray-300">
                      Spin up containers instantly and test in real-time sandbox environments.
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-4">
                  <div className="text-2xl">📚</div>
                  <div>
                    <h3 className="text-xl font-semibold mb-2">Learn & Upskill</h3>
                    <p className="text-gray-300">
                      Access structured courses and tutorials tailored for hands-on learning.
                    </p>
                  </div>
                </div>
                <div className="flex items-start gap-4">
                  <div className="text-2xl">🔍</div>
                  <div>
                    <h3 className="text-xl font-semibold mb-2">Analytics Dashboard</h3>
                    <p className="text-gray-300">
                      Track your lab usage, performance metrics, and learning progress in one place.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Side - Login/Signup Form */}
          <div className="flex-1 bg-white flex items-center justify-center px-8 lg:px-16">
            <div className="w-full max-w-md">
              <h2 className="text-3xl font-bold mb-8 text-gray-800 text-center">
                {isLogin ? 'Login' : 'Sign Up'}
              </h2>

              <form onSubmit={handleSubmit}>
                {!isLogin && (
                  <div className="mb-6">
                    <label className="block mb-2 font-medium text-gray-700">Full Name</label>
                    <input
                      type="text"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      className="w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-gray-800 placeholder-gray-500 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition"
                      placeholder="John Doe"
                      required={!isLogin}
                    />
                  </div>
                )}

                <div className="mb-6">
                  <label className="block mb-2 font-medium text-gray-700">Email Address</label>
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    className="w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-gray-800 placeholder-gray-500 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition"
                    placeholder="you@example.com"
                    required
                  />
                </div>

                <div className="mb-6">
                  <label className="block mb-2 font-medium text-gray-700">Password</label>
                  <input
                    type="password"
                    name="password"
                    value={formData.password}
                    onChange={handleInputChange}
                    className="w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-gray-800 placeholder-gray-500 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition"
                    placeholder="••••••••"
                    required
                  />
                </div>

                {!isLogin && (
                  <div className="mb-6">
                    <label className="block mb-2 font-medium text-gray-700">Confirm Password</label>
                    <input
                      type="password"
                      name="confirmPassword"
                      value={formData.confirmPassword}
                      onChange={handleInputChange}
                      className="w-full bg-white border border-gray-300 rounded-lg px-4 py-3 text-gray-800 placeholder-gray-500 focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition"
                      placeholder="••••••••"
                      required={!isLogin}
                    />
                  </div>
                )}

                {error && (
                  <div className="text-red-500 text-sm mb-4 text-center bg-red-50 p-3 rounded-lg">
                    {error}
                  </div>
                )}

                {success && (
                  <div className="text-green-500 text-sm mb-4 text-center bg-green-50 p-3 rounded-lg">
                    {success}
                  </div>
                )}

                <button
                  type="submit"
                  disabled={loading}
                  className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white py-3 rounded-lg font-medium transition"
                >
                  {loading ? (isLogin ? 'Signing In...' : 'Creating Account...') : (isLogin ? 'Sign In' : 'Create Account')}
                </button>
              </form>

              <div className="mt-8 space-y-4">
                <div className="text-center text-sm text-gray-600">
                  {isLogin ? "Don't have an account?" : "Already have an account?"}{' '}
                  <button
                    onClick={() => {
                      setIsLogin(!isLogin);
                      setError('');
                      setSuccess('');
                      setFormData({
                        name: '',
                        email: '',
                        password: '',
                        confirmPassword: ''
                      });
                    }}
                    className="text-blue-600 font-medium hover:text-blue-500 transition"
                  >
                    {isLogin ? 'Sign up' : 'Login'}
                  </button>
                </div>

                {isLogin && (
                  <div className="text-center">
                    <Link
                      href="/forgot-password"
                      className="text-sm text-gray-500 hover:text-blue-600 transition underline"
                    >
                      Forgot your password?
                    </Link>
                  </div>
                )}

                <div className="text-center">
                  <Link
                    href="/"
                    className="inline-flex items-center text-sm text-gray-500 hover:text-blue-600 transition"
                  >
                    <span className="mr-1">←</span> Back to Homepage
                  </Link>
                </div>

                {/* Demo Credentials */}
                {isLogin && (
                  <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <p className="text-sm font-medium text-blue-800 mb-2">Demo Credentials:</p>
                    <div className="text-xs text-blue-600 space-y-1">
                      <p>Email: admin@local | Password: temp123 (Admin)</p>
                      <p>Email: test1@example.com | Password: temp123 (Employee)</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

========================================
PAGES - ADMIN
========================================


--- admin/courses.js ---

// pages/admin/courses.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import axios from 'axios';
import {
  BookOpen,
  Plus,
  Edit,
  Trash2,
  Eye,
  Users,
  Calendar,
  ArrowLeft,
  Search,
  Filter,
  MoreVertical
} from 'lucide-react';

export default function AdminCourses() {
  const router = useRouter();
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [newCourse, setNewCourse] = useState({
    title: '',
    description: '',
    visibility: 'private'
  });
  const [creating, setCreating] = useState(false);

  useEffect(() => {
    checkAuth();
    fetchCourses();
  }, []);

  const checkAuth = () => {
    const token = localStorage.getItem('token');
    const user = localStorage.getItem('user');
    
    if (!token || !user) {
      router.push('/auth/login');
      return;
    }
    
    const userData = JSON.parse(user);
    if (userData.role !== 'admin' && userData.role !== 'manager') {
      router.push('/user/dashboard');
    }
  };

  const fetchCourses = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('/api/courses', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setCourses(response.data.data);
      }
    } catch (error) {
      console.error('Failed to fetch courses:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateCourse = async (e) => {
    e.preventDefault();
    setCreating(true);
    
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post('/api/courses', newCourse, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setShowCreateModal(false);
        setNewCourse({ title: '', description: '', visibility: 'private' });
        fetchCourses(); // Refresh the courses list
      }
    } catch (error) {
      console.error('Failed to create course:', error);
      alert('Failed to create course: ' + (error.response?.data?.message || error.message));
    } finally {
      setCreating(false);
    }
  };

  const handleDeleteCourse = async (courseId, courseTitle) => {
    if (!confirm(`Are you sure you want to delete "${courseTitle}"?`)) {
      return;
    }
    
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`/api/courses/${courseId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      fetchCourses(); // Refresh the courses list
    } catch (error) {
      console.error('Failed to delete course:', error);
      alert('Failed to delete course: ' + (error.response?.data?.message || error.message));
    }
  };

  const filteredCourses = courses.filter(course =>
    course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    course.description?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="spinner h-8 w-8"></div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Course Management - ParkarLabs</title>
        <meta name="description" content="Manage courses and training content" />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <div className="bg-white shadow-sm border-b">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center space-x-4">
                <Link href="/admin/dashboard" className="text-gray-500 hover:text-gray-700">
                  <ArrowLeft className="h-5 w-5" />
                </Link>
                <div>
                  <h1 className="text-xl font-semibold text-gray-900">Course Management</h1>
                  <p className="text-sm text-gray-500">Create and manage training courses</p>
                </div>
              </div>
              
              <button
                onClick={() => setShowCreateModal(true)}
                className="btn btn-primary"
              >
                <Plus className="h-4 w-4 mr-2" />
                New Course
              </button>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Search and Filters */}
          <div className="mb-6 flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <input
                type="text"
                placeholder="Search courses..."
                className="input pl-10"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <button className="btn btn-secondary">
              <Filter className="h-4 w-4 mr-2" />
              Filters
            </button>
          </div>

          {/* Courses Grid */}
          {filteredCourses.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredCourses.map((course) => (
                <div key={course.id} className="card hover:shadow-md transition-shadow">
                  <div className="card-header">
                    <div className="flex justify-between items-start">
                      <div className="flex items-start space-x-3">
                        <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                          <BookOpen className="w-5 h-5 text-blue-600" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <h3 className="text-lg font-semibold text-gray-900 truncate">
                            {course.title}
                          </h3>
                          <p className="text-sm text-gray-500">
                            by {course.created_by_name}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-1">
                        <button className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100">
                          <Eye className="h-4 w-4" />
                        </button>
                        <button 
                          onClick={() => router.push(`/admin/courses/${course.id}/edit`)}
                          className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100"
                        >
                          <Edit className="h-4 w-4" />
                        </button>
                        <button 
                          onClick={() => handleDeleteCourse(course.id, course.title)}
                          className="p-2 text-gray-400 hover:text-red-600 rounded-lg hover:bg-gray-100"
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                  
                  <div className="card-content">
                    <p className="text-gray-600 text-sm mb-4 line-clamp-3">
                      {course.description}
                    </p>
                    
                    <div className="flex items-center justify-between text-sm text-gray-500">
                      <div className="flex items-center space-x-4">
                        <div className="flex items-center">
                          <BookOpen className="h-4 w-4 mr-1" />
                          {course.module_count} modules
                        </div>
                        <div className="flex items-center">
                          <Users className="h-4 w-4 mr-1" />
                          {course.assignment_count} assigned
                        </div>
                      </div>
                      
                      <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                        course.visibility === 'public' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {course.visibility}
                      </span>
                    </div>
                    
                    <div className="flex items-center text-xs text-gray-400 mt-2">
                      <Calendar className="h-3 w-3 mr-1" />
                      Created {new Date(course.created_at).toLocaleDateString()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <BookOpen className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {searchTerm ? 'No courses found' : 'No courses yet'}
              </h3>
              <p className="text-gray-600 mb-6">
                {searchTerm 
                  ? 'Try adjusting your search terms'
                  : 'Get started by creating your first training course'
                }
              </p>
              {!searchTerm && (
                <button
                  onClick={() => setShowCreateModal(true)}
                  className="btn btn-primary"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Create First Course
                </button>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Create Course Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Create New Course</h3>
            
            <form onSubmit={handleCreateCourse}>
              <div className="space-y-4">
                <div>
                  <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
                    Course Title
                  </label>
                  <input
                    type="text"
                    id="title"
                    required
                    className="input"
                    placeholder="e.g., React.js Fundamentals"
                    value={newCourse.title}
                    onChange={(e) => setNewCourse({...newCourse, title: e.target.value})}
                  />
                </div>
                
                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    id="description"
                    rows={3}
                    className="input"
                    placeholder="Brief description of the course content"
                    value={newCourse.description}
                    onChange={(e) => setNewCourse({...newCourse, description: e.target.value})}
                  />
                </div>
                
                <div>
                  <label htmlFor="visibility" className="block text-sm font-medium text-gray-700 mb-1">
                    Visibility
                  </label>
                  <select
                    id="visibility"
                    className="input"
                    value={newCourse.visibility}
                    onChange={(e) => setNewCourse({...newCourse, visibility: e.target.value})}
                  >
                    <option value="private">Private</option>
                    <option value="public">Public</option>
                  </select>
                </div>
              </div>
              
              <div className="flex justify-end space-x-3 mt-6">
                <button
                  type="button"
                  onClick={() => setShowCreateModal(false)}
                  className="btn btn-secondary"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={creating}
                  className="btn btn-primary"
                >
                  {creating ? 'Creating...' : 'Create Course'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </>
  );
}

--- admin/dashboard.js ---

// pages/admin/dashboard.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import axios from 'axios';
import {
  Users,
  BookOpen,
  Container,
  Activity,
  Settings,
  Plus,
  TrendingUp,
  Server,
  AlertCircle,
  CheckCircle,
  Clock,
  BarChart3,
  LogOut,
  ClipboardList
} from 'lucide-react';

export default function AdminDashboard() {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalCourses: 0,
    totalContainers: 0,
    runningContainers: 0,
    assignedTasks: 0,
    completedTasks: 0
  });
  const [recentUsers, setRecentUsers] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    checkAuth();
    fetchDashboardData();
  }, []);

  const checkAuth = async () => {
    const token = localStorage.getItem('token');
    const storedUser = localStorage.getItem('user');

    if (!token || !storedUser) {
      router.push('/auth/login');
      return;
    }

    try {
      const userData = JSON.parse(storedUser);

      // Check if user is admin or manager
      if (userData.role !== 'admin' && userData.role !== 'manager') {
        router.push('/user/dashboard');
        return;
      }

      setUser(userData);
    } catch (error) {
      console.error('Auth check failed:', error);
      router.push('/auth/login');
    }
  };

  const fetchDashboardData = async () => {
    try {
      const token = localStorage.getItem('token');
      const headers = { Authorization: `Bearer ${token}` };

      // Fetch real admin stats from database
      const [statsResponse, usersResponse] = await Promise.all([
        axios.get('/api/admin/test', { headers }),
        axios.get('/api/auth/users', { headers })
      ]);

      if (statsResponse.data.success) {
        setStats({
          totalUsers: parseInt(statsResponse.data.stats.total_users) || 0,
          totalCourses: parseInt(statsResponse.data.stats.total_courses) || 0,
          totalContainers: parseInt(statsResponse.data.stats.total_containers) || 0,
          runningContainers: parseInt(statsResponse.data.stats.running_containers) || 0,
          assignedTasks: parseInt(statsResponse.data.stats.pending_assignments) || 0,
          completedTasks: parseInt(statsResponse.data.stats.completed_assignments) || 0
        });
      }

      if (usersResponse.data.success) {
        setRecentUsers(usersResponse.data.data.slice(0, 5));
      }

    } catch (error) {
      console.error('Failed to fetch dashboard data:', error);
      // If admin endpoint fails, try to fetch at least user data
      if (error.response?.status === 401) {
        console.log('Admin endpoint failed, user might not have admin access');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    router.push('/auth/login');
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="spinner h-8 w-8"></div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Admin Dashboard - ParkarLabs</title>
        <meta name="description" content="ParkarLabs Admin Dashboard" />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center space-x-4">
                <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-2 rounded-lg">
                  <Server className="h-6 w-6 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-semibold text-gray-900">ParkarLabs Admin</h1>
                  <p className="text-sm text-gray-500">Management Dashboard</p>
                </div>
              </div>

              <div className="flex items-center space-x-4">
                <div className="text-right">
                  <p className="text-sm font-medium text-gray-900">{user?.name}</p>
                  <p className="text-xs text-gray-500 capitalize">{user?.role}</p>
                </div>
                <button
                  onClick={handleLogout}
                  className="btn btn-ghost btn-sm"
                >
                  <LogOut className="h-4 w-4 mr-1" />
                  Logout
                </button>
              </div>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Welcome Section */}
          <div className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              Welcome back, {user?.name}!
            </h2>
            <p className="text-gray-600">
              Here's what's happening in your lab today.
            </p>
          </div>

          {/* Stats Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6 mb-8">
            <div className="stat-card">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <Users className="w-5 h-5 text-blue-600" />
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Users</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.totalUsers}</p>
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                    <BookOpen className="w-5 h-5 text-green-600" />
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Courses</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.totalCourses}</p>
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                    <Container className="w-5 h-5 text-purple-600" />
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Containers</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.totalContainers}</p>
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center">
                    <Activity className="w-5 h-5 text-orange-600" />
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Active Now</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.runningContainers}</p>
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <Clock className="w-5 h-5 text-yellow-600" />
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Pending Tasks</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.assignedTasks}</p>
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-emerald-100 rounded-lg flex items-center justify-center">
                    <CheckCircle className="w-5 h-5 text-emerald-600" />
                  </div>
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Completed</p>
                  <p className="text-2xl font-semibold text-gray-900">{stats.completedTasks}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Action Cards */}
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8">
            <div className="card p-6 hover:shadow-md transition-shadow cursor-pointer">
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                  <Users className="w-5 h-5 text-blue-600" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900">Manage Users</h3>
              </div>
              <p className="text-gray-600 mb-4">Add, edit, and manage user accounts and permissions.</p>
              <button 
                onClick={() => router.push('/admin/users')}
                className="btn btn-primary btn-md w-full flex items-center justify-center"
              >
                <Users className="h-4 w-4 mr-2" />
                Manage Users
              </button>
            </div>

            <div className="card p-6 hover:shadow-md transition-shadow cursor-pointer" onClick={() => router.push('/admin/courses')}>
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mr-3">
                  <BookOpen className="w-5 h-5 text-green-600" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900">Course Management</h3>
              </div>
              <p className="text-gray-600 mb-4">Create courses, modules, and assign to users.</p>
              <Link href="/admin/courses" className="btn btn-primary btn-sm">
                <Plus className="w-4 h-4 mr-1" />
                Manage Courses
              </Link>
            </div>

            <div className="card p-6 hover:shadow-md transition-shadow cursor-pointer" onClick={() => router.push('/admin/tasks')}>
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center mr-3">
                  <ClipboardList className="w-5 h-5 text-purple-600" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900">Task Management</h3>
              </div>
              <p className="text-gray-600 mb-4">Create and assign tasks to users and teams.</p>
              <Link href="/admin/tasks" className="btn btn-primary btn-sm">
                <Plus className="w-4 h-4 mr-1" />
                Manage Tasks
              </Link>
            </div>

            <div className="card p-6 hover:shadow-md transition-shadow cursor-pointer">
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center mr-3">
                  <Container className="w-5 h-5 text-orange-600" />
                </div>
                <h3 className="text-lg font-semibold text-gray-900">Container Monitor</h3>
              </div>
              <p className="text-gray-600 mb-4">Monitor and manage all running containers.</p>
              <button className="btn btn-primary btn-sm">
                <BarChart3 className="w-4 h-4 mr-1" />
                View Monitor
              </button>
            </div>
          </div>

          {/* Recent Users Table */}
          <div className="card">
            <div className="card-header">
              <h3 className="text-lg font-semibold text-gray-900">Recent Users</h3>
              <p className="text-sm text-gray-600">Latest user registrations and activity</p>
            </div>
            <div className="card-content">
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        User
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Role
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Status
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Joined
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {recentUsers.map((user) => (
                      <tr key={user.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">{user.name}</div>
                            <div className="text-sm text-gray-500">{user.email}</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                            user.role_name === 'admin' ? 'bg-red-100 text-red-800' :
                            user.role_name === 'manager' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {user.role_name}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex items-center px-2 py-1 text-xs font-medium rounded-full ${
                            user.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                          }`}>
                            <span className={`w-1.5 h-1.5 rounded-full mr-1 ${
                              user.status === 'active' ? 'bg-green-400' : 'bg-gray-400'
                            }`}></span>
                            {user.status}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(user.created_at).toLocaleDateString()}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </main>
      </div>
    </>
  );
}

--- admin/tasks.js ---

// pages/admin/tasks.js
import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import axios from 'axios';
import { 
  Plus, 
  Search, 
  Filter, 
  Edit3, 
  Trash2, 
  Users, 
  Calendar,
  Clock,
  BookOpen,
  ChevronRight,
  Eye,
  Play,
  Pause,
  CheckCircle,
  AlertCircle,
  User
} from 'lucide-react';

export default function AdminTasks() {
  const router = useRouter();
  const [tasks, setTasks] = useState([]);
  const [users, setUsers] = useState([]);
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [stats, setStats] = useState({
    total: 0,
    pending: 0,
    inProgress: 0,
    completed: 0
  });

  // Form states
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    relatedCourseId: '',
    priority: 'medium',
    estimatedHours: ''
  });
  
  const [assignmentData, setAssignmentData] = useState({
    userIds: [],
    dueDate: '',
    priority: 'medium',
    notes: ''
  });

  // Check authentication
  useEffect(() => {
    const token = localStorage.getItem('token');
    const user = JSON.parse(localStorage.getItem('user') || '{}');
    
    if (!token || !['admin', 'manager'].includes(user.role)) {
      router.push('/auth/login');
      return;
    }

    fetchTasks();
    fetchUsers();
    fetchCourses();
  }, []);

  const fetchTasks = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('/api/tasks', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setTasks(response.data.data);
        calculateStats(response.data.data);
      }
    } catch (error) {
      console.error('Error fetching tasks:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchUsers = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('/api/auth/users', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setUsers(response.data.data);
      }
    } catch (error) {
      console.error('Error fetching users:', error);
    }
  };

  const fetchCourses = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('/api/courses', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setCourses(response.data.data);
      }
    } catch (error) {
      console.error('Error fetching courses:', error);
    }
  };

  const calculateStats = (tasksData) => {
    const stats = {
      total: tasksData.length,
      pending: 0,
      inProgress: 0,
      completed: 0
    };
    
    tasksData.forEach(task => {
      stats.pending += parseInt(task.pending_count || 0);
      stats.completed += parseInt(task.completed_count || 0);
      // Assuming in_progress tasks are total assignments minus pending and completed
      const total_assignments = parseInt(task.assignment_count || 0);
      stats.inProgress += total_assignments - stats.pending - stats.completed;
    });
    
    setStats(stats);
  };

  const handleCreateTask = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post('/api/tasks', newTask, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setShowCreateModal(false);
        setNewTask({ title: '', description: '', relatedCourseId: '', priority: 'medium', estimatedHours: '' });
        fetchTasks();
      }
    } catch (error) {
      console.error('Error creating task:', error);
      alert('Error creating task: ' + (error.response?.data?.message || error.message));
    }
  };

  const handleAssignTask = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(`/api/tasks/${selectedTask.id}/assign`, assignmentData, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setShowAssignModal(false);
        setSelectedTask(null);
        setAssignmentData({ userIds: [], dueDate: '', priority: 'medium', notes: '' });
        fetchTasks();
      }
    } catch (error) {
      console.error('Error assigning task:', error);
      alert('Error assigning task: ' + (error.response?.data?.message || error.message));
    }
  };

  const handleDeleteTask = async (taskId) => {
    if (!confirm('Are you sure you want to delete this task?')) return;
    
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`/api/tasks/${taskId}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      fetchTasks();
    } catch (error) {
      console.error('Error deleting task:', error);
      alert('Error deleting task: ' + (error.response?.data?.message || error.message));
    }
  };

  const filteredTasks = tasks.filter(task => {
    const matchesSearch = task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         task.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    if (statusFilter === 'all') return matchesSearch;
    if (statusFilter === 'pending') return matchesSearch && parseInt(task.pending_count) > 0;
    if (statusFilter === 'completed') return matchesSearch && parseInt(task.completed_count) > 0;
    if (statusFilter === 'no-assignments') return matchesSearch && parseInt(task.assignment_count) === 0;
    
    return matchesSearch;
  });

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner h-8 w-8 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading tasks...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Task Management - ParkarLabs Admin</title>
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <div className="bg-white shadow">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center space-x-4">
                <Link href="/admin/dashboard" className="text-gray-600 hover:text-gray-900">
                  Dashboard
                </Link>
                <ChevronRight className="h-4 w-4 text-gray-400" />
                <span className="text-gray-900 font-medium">Task Management</span>
              </div>
              
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => setShowCreateModal(true)}
                  className="btn btn-primary btn-md"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  New Task
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="stat-label">Total Tasks</p>
                  <p className="stat-value">{stats.total}</p>
                </div>
                <div className="p-3 bg-blue-100 rounded-lg">
                  <BookOpen className="h-6 w-6 text-blue-600" />
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="stat-label">Pending Tasks</p>
                  <p className="stat-value">{stats.pending}</p>
                </div>
                <div className="p-3 bg-yellow-100 rounded-lg">
                  <Clock className="h-6 w-6 text-yellow-600" />
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="stat-label">In Progress</p>
                  <p className="stat-value">{stats.inProgress}</p>
                </div>
                <div className="p-3 bg-orange-100 rounded-lg">
                  <Play className="h-6 w-6 text-orange-600" />
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="stat-label">Completed</p>
                  <p className="stat-value">{stats.completed}</p>
                </div>
                <div className="p-3 bg-green-100 rounded-lg">
                  <CheckCircle className="h-6 w-6 text-green-600" />
                </div>
              </div>
            </div>
          </div>

          {/* Search and Filters */}
          <div className="card p-6 mb-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search tasks..."
                    className="input pl-10"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
              </div>
              
              <div className="flex gap-4">
                <select
                  className="input"
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                >
                  <option value="all">All Tasks</option>
                  <option value="pending">Has Pending</option>
                  <option value="completed">Has Completed</option>
                  <option value="no-assignments">No Assignments</option>
                </select>
              </div>
            </div>
          </div>

          {/* Tasks List */}
          <div className="space-y-4">
            {filteredTasks.map((task) => (
              <div key={task.id} className="card hover:shadow-medium transition-shadow">
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-gray-900 mb-2">
                        {task.title}
                      </h3>
                      <p className="text-gray-600 mb-3">{task.description}</p>
                      
                      <div className="flex items-center gap-4 text-sm text-gray-500">
                        <span className="flex items-center">
                          <User className="h-4 w-4 mr-1" />
                          {task.created_by_name}
                        </span>
                        <span className="flex items-center">
                          <Calendar className="h-4 w-4 mr-1" />
                          {formatDate(task.created_at)}
                        </span>
                        {task.course_title && (
                          <span className="flex items-center">
                            <BookOpen className="h-4 w-4 mr-1" />
                            {task.course_title}
                          </span>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={() => {
                          setSelectedTask(task);
                          setShowAssignModal(true);
                        }}
                        className="btn btn-outline btn-sm"
                      >
                        <Users className="h-4 w-4 mr-1" />
                        Assign
                      </button>
                      
                      <button
                        onClick={() => handleDeleteTask(task.id)}
                        className="btn btn-ghost btn-sm text-red-600 hover:bg-red-50"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                  
                  {/* Assignment Stats */}
                  <div className="flex items-center gap-6 pt-4 border-t border-gray-200">
                    <div className="flex items-center text-sm">
                      <span className="text-gray-500 mr-2">Total Assignments:</span>
                      <span className="font-medium">{task.assignment_count}</span>
                    </div>
                    <div className="flex items-center text-sm">
                      <span className="text-gray-500 mr-2">Pending:</span>
                      <span className="font-medium text-yellow-600">{task.pending_count}</span>
                    </div>
                    <div className="flex items-center text-sm">
                      <span className="text-gray-500 mr-2">Completed:</span>
                      <span className="font-medium text-green-600">{task.completed_count}</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {filteredTasks.length === 0 && (
            <div className="text-center py-12">
              <BookOpen className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No tasks found</h3>
              <p className="text-gray-600">Create your first task to get started.</p>
            </div>
          )}
        </div>

        {/* Create Task Modal */}
        {showCreateModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-semibold mb-4">Create New Task</h3>
              
              <form onSubmit={handleCreateTask} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Task Title
                  </label>
                  <input
                    type="text"
                    required
                    className="input"
                    value={newTask.title}
                    onChange={(e) => setNewTask({...newTask, title: e.target.value})}
                    placeholder="e.g., Learn Docker Containers"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    required
                    rows="3"
                    className="input"
                    value={newTask.description}
                    onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                    placeholder="Describe what needs to be accomplished..."
                  ></textarea>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Related Course (Optional)
                  </label>
                  <select
                    className="input"
                    value={newTask.relatedCourseId}
                    onChange={(e) => setNewTask({...newTask, relatedCourseId: e.target.value})}
                  >
                    <option value="">Select a course...</option>
                    {courses.map((course) => (
                      <option key={course.id} value={course.id}>
                        {course.title}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => setShowCreateModal(false)}
                    className="btn btn-secondary"
                  >
                    Cancel
                  </button>
                  <button type="submit" className="btn btn-primary">
                    Create Task
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {/* Assign Task Modal */}
        {showAssignModal && selectedTask && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-semibold mb-4">
                Assign Task: {selectedTask.title}
              </h3>
              
              <form onSubmit={handleAssignTask} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Select Users
                  </label>
                  <div className="space-y-2 max-h-40 overflow-y-auto border border-gray-200 rounded p-2">
                    {users.filter(user => user.role_name === 'employee').map((user) => (
                      <label key={user.id} className="flex items-center">
                        <input
                          type="checkbox"
                          className="mr-2"
                          checked={assignmentData.userIds.includes(user.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setAssignmentData({
                                ...assignmentData,
                                userIds: [...assignmentData.userIds, user.id]
                              });
                            } else {
                              setAssignmentData({
                                ...assignmentData,
                                userIds: assignmentData.userIds.filter(id => id !== user.id)
                              });
                            }
                          }}
                        />
                        <span>{user.name} ({user.email})</span>
                      </label>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Due Date (Optional)
                  </label>
                  <input
                    type="date"
                    className="input"
                    value={assignmentData.dueDate}
                    onChange={(e) => setAssignmentData({...assignmentData, dueDate: e.target.value})}
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Notes (Optional)
                  </label>
                  <textarea
                    rows="2"
                    className="input"
                    value={assignmentData.notes}
                    onChange={(e) => setAssignmentData({...assignmentData, notes: e.target.value})}
                    placeholder="Additional instructions..."
                  ></textarea>
                </div>

                <div className="flex justify-end space-x-3 pt-4">
                  <button
                    type="button"
                    onClick={() => {
                      setShowAssignModal(false);
                      setSelectedTask(null);
                      setAssignmentData({ userIds: [], dueDate: '', priority: 'medium', notes: '' });
                    }}
                    className="btn btn-secondary"
                  >
                    Cancel
                  </button>
                  <button 
                    type="submit" 
                    className="btn btn-primary"
                    disabled={assignmentData.userIds.length === 0}
                  >
                    Assign Task
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </>
  );
}

--- admin/users.js ---

// pages/admin/users.js
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import axios from 'axios';
import {
  Users,
  Plus,
  Search,
  Filter,
  Edit,
  Trash2,
  Eye,
  MoreVertical,
  ChevronLeft,
  ChevronRight,
  UserCheck,
  UserX,
  Activity,
  Shield,
  Calendar,
  Mail
} from 'lucide-react';

// API Configuration - Points to backend server
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';

export default function AdminUsers() {
  const router = useRouter();
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Pagination and filtering
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalUsers, setTotalUsers] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [sortBy, setSortBy] = useState('created_at');
  const [sortOrder, setSortOrder] = useState('DESC');

  // Available options
  const [roles, setRoles] = useState([]);
  const [stats, setStats] = useState({});

  // Modal states
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);

  // Form data
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    role_id: '',
    azure_ad_id: '',
    status: 'active'
  });

  // Check authentication
  useEffect(() => {
    const token = localStorage.getItem('token');
    const user = JSON.parse(localStorage.getItem('user') || '{}');

    if (!token || !['admin', 'manager'].includes(user.role)) {
      router.push('/auth/login');
      return;
    }

    // Set default axios authorization header
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  }, [router]);

  // Fetch data
  useEffect(() => {
    fetchUsers();
    fetchRoles();
    fetchStats();
  }, [currentPage, searchTerm, roleFilter, statusFilter, sortBy, sortOrder]);

  const fetchUsers = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${API_BASE_URL}/api/users`, {
        params: {
          page: currentPage,
          limit: 10,
          search: searchTerm,
          role: roleFilter,
          status: statusFilter,
          sortBy,
          sortOrder
        }
      });

      if (response.data.success) {
        setUsers(response.data.data);
        setTotalPages(response.data.pagination.totalPages);
        setTotalUsers(response.data.pagination.total);
      }
    } catch (error) {
      console.error('Error fetching users:', error);
      setError('Failed to fetch users');
    } finally {
      setLoading(false);
    }
  };

  const fetchRoles = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/users/roles`);
      if (response.data.success) {
        setRoles(response.data.data);
      }
    } catch (error) {
      console.error('Error fetching roles:', error);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/users/stats`);
      if (response.data.success) {
        setStats(response.data.data);
      }
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const handleCreateUser = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(`${API_BASE_URL}/api/users`, formData);
      if (response.data.success) {
        setSuccess('User created successfully');
        setShowCreateModal(false);
        setFormData({ name: '', email: '', role_id: '', azure_ad_id: '', status: 'active' });
        fetchUsers();
        fetchStats();
      }
    } catch (error) {
      setError(error.response?.data?.message || 'Failed to create user');
    }
  };

  const handleUpdateUser = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.put(`${API_BASE_URL}/api/users/${selectedUser.id}`, formData);
      if (response.data.success) {
        setSuccess('User updated successfully');
        setShowEditModal(false);
        setSelectedUser(null);
        setFormData({ name: '', email: '', role_id: '', azure_ad_id: '', status: 'active' });
        fetchUsers();
        fetchStats();
      }
    } catch (error) {
      setError(error.response?.data?.message || 'Failed to update user');
    }
  };

  const handleDeleteUser = async () => {
    try {
      const response = await axios.delete(`${API_BASE_URL}/api/users/${selectedUser.id}`);
      if (response.data.success) {
        setSuccess('User deleted successfully');
        setShowDeleteModal(false);
        setSelectedUser(null);
        fetchUsers();
        fetchStats();
      }
    } catch (error) {
      setError(error.response?.data?.message || 'Failed to delete user');
    }
  };

  const openEditModal = (user) => {
    setSelectedUser(user);
    setFormData({
      name: user.name,
      email: user.email,
      role_id: roles.find(r => r.name === user.role_name)?.id || '',
      azure_ad_id: user.azure_ad_id,
      status: user.status
    });
    setShowEditModal(true);
  };

  const openViewModal = async (user) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/users/${user.id}`);
      if (response.data.success) {
        setSelectedUser(response.data.data);
        setShowViewModal(true);
      }
    } catch (error) {
      setError('Failed to fetch user details');
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return 'text-green-600 bg-green-100';
      case 'disabled': return 'text-red-600 bg-red-100';
      case 'suspended': return 'text-yellow-600 bg-yellow-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getRoleColor = (role) => {
    switch (role) {
      case 'admin': return 'text-purple-600 bg-purple-100';
      case 'manager': return 'text-blue-600 bg-blue-100';
      case 'employee': return 'text-gray-600 bg-gray-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  return (
    <>
      <Head>
        <title>User Management - ParkarLabs Admin</title>
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <div className="bg-white shadow">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => router.push('/admin/dashboard')}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <ChevronLeft className="h-5 w-5" />
                </button>
                <Users className="h-6 w-6 text-blue-600" />
                <h1 className="text-2xl font-bold text-gray-900">User Management</h1>
              </div>
              <button
                onClick={() => setShowCreateModal(true)}
                className="btn btn-primary btn-md flex items-center"
              >
                <Plus className="h-4 w-4 mr-2" />
                Add User
              </button>
            </div>
          </div>
        </div>

        {/* Error/Success Messages */}
        {error && (
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              {error}
              <button
                onClick={() => setError('')}
                className="float-right text-red-500 hover:text-red-700"
              >
                ×
              </button>
            </div>
          </div>
        )}

        {success && (
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded">
              {success}
              <button
                onClick={() => setSuccess('')}
                className="float-right text-green-500 hover:text-green-700"
              >
                ×
              </button>
            </div>
          </div>
        )}

        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Statistics Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="card p-6">
              <div className="flex items-center">
                <div className="bg-blue-100 p-3 rounded-lg">
                  <Users className="h-6 w-6 text-blue-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Users</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.total_users || 0}</p>
                </div>
              </div>
            </div>

            <div className="card p-6">
              <div className="flex items-center">
                <div className="bg-green-100 p-3 rounded-lg">
                  <UserCheck className="h-6 w-6 text-green-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Active Users</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.active_users || 0}</p>
                </div>
              </div>
            </div>

            <div className="card p-6">
              <div className="flex items-center">
                <div className="bg-purple-100 p-3 rounded-lg">
                  <Shield className="h-6 w-6 text-purple-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Admins</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.admin_users || 0}</p>
                </div>
              </div>
            </div>

            <div className="card p-6">
              <div className="flex items-center">
                <div className="bg-yellow-100 p-3 rounded-lg">
                  <Calendar className="h-6 w-6 text-yellow-600" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">New This Week</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.new_users_this_week || 0}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Filters and Search */}
          <div className="card p-6 mb-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search users..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="input pl-10"
                />
              </div>

              <select
                value={roleFilter}
                onChange={(e) => setRoleFilter(e.target.value)}
                className="input"
              >
                <option value="">All Roles</option>
                {roles.map(role => (
                  <option key={role.id} value={role.name}>{role.name}</option>
                ))}
              </select>

              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="input"
              >
                <option value="">All Status</option>
                <option value="active">Active</option>
                <option value="disabled">Disabled</option>
                <option value="suspended">Suspended</option>
              </select>

              <select
                value={`${sortBy}-${sortOrder}`}
                onChange={(e) => {
                  const [field, order] = e.target.value.split('-');
                  setSortBy(field);
                  setSortOrder(order);
                }}
                className="input"
              >
                <option value="created_at-DESC">Newest First</option>
                <option value="created_at-ASC">Oldest First</option>
                <option value="name-ASC">Name A-Z</option>
                <option value="name-DESC">Name Z-A</option>
                <option value="email-ASC">Email A-Z</option>
              </select>
            </div>
          </div>

          {/* Users Table */}
          <div className="card">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      User
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Role
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Activity
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Created
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {loading ? (
                    <tr>
                      <td colSpan="6" className="px-6 py-4 text-center">
                        <div className="spinner h-6 w-6 mx-auto"></div>
                      </td>
                    </tr>
                  ) : users.length === 0 ? (
                    <tr>
                      <td colSpan="6" className="px-6 py-4 text-center text-gray-500">
                        No users found
                      </td>
                    </tr>
                  ) : (
                    users.map((user) => (
                      <tr key={user.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-10 w-10">
                              <div className="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                                <span className="text-sm font-medium text-gray-700">
                                  {user.name.charAt(0).toUpperCase()}
                                </span>
                              </div>
                            </div>
                            <div className="ml-4">
                              <div className="text-sm font-medium text-gray-900">{user.name}</div>
                              <div className="text-sm text-gray-500">{user.email}</div>
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getRoleColor(user.role_name)}`}>
                            {user.role_name}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(user.status)}`}>
                            {user.status}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          <div className="space-y-1">
                            <div>{user.total_assignments || 0} assignments</div>
                            <div>{user.running_containers || 0} containers</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {formatDate(user.created_at)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <div className="flex items-center justify-end space-x-2">
                            <button
                              onClick={() => openViewModal(user)}
                              className="text-blue-600 hover:text-blue-900"
                              title="View Details"
                            >
                              <Eye className="h-4 w-4" />
                            </button>
                            <button
                              onClick={() => openEditModal(user)}
                              className="text-yellow-600 hover:text-yellow-900"
                              title="Edit User"
                            >
                              <Edit className="h-4 w-4" />
                            </button>
                            <button
                              onClick={() => {
                                setSelectedUser(user);
                                setShowDeleteModal(true);
                              }}
                              className="text-red-600 hover:text-red-900"
                              title="Delete User"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                <div className="flex-1 flex justify-between sm:hidden">
                  <button
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                  >
                    Previous
                  </button>
                  <button
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                    className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                  >
                    Next
                  </button>
                </div>
                <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                  <div>
                    <p className="text-sm text-gray-700">
                      Showing{' '}
                      <span className="font-medium">{((currentPage - 1) * 10) + 1}</span>{' '}
                      to{' '}
                      <span className="font-medium">
                        {Math.min(currentPage * 10, totalUsers)}
                      </span>{' '}
                      of{' '}
                      <span className="font-medium">{totalUsers}</span>{' '}
                      results
                    </p>
                  </div>
                  <div>
                    <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                      <button
                        onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                        disabled={currentPage === 1}
                        className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                      >
                        <ChevronLeft className="h-5 w-5" />
                      </button>

                      {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                        const page = i + 1;
                        return (
                          <button
                            key={page}
                            onClick={() => setCurrentPage(page)}
                            className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                              currentPage === page
                                ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                                : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                            }`}
                          >
                            {page}
                          </button>
                        );
                      })}

                      <button
                        onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                        disabled={currentPage === totalPages}
                        className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                      >
                        <ChevronRight className="h-5 w-5" />
                      </button>
                    </nav>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Create User Modal */}
        {showCreateModal && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
              <div className="mt-3">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Create New User</h3>
                <form onSubmit={handleCreateUser} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                    <input
                      type="text"
                      required
                      value={formData.name}
                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                      className="input"
                      placeholder="Enter full name"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                    <input
                      type="email"
                      required
                      value={formData.email}
                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                      className="input"
                      placeholder="Enter email address"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                    <select
                      required
                      value={formData.role_id}
                      onChange={(e) => setFormData({ ...formData, role_id: e.target.value })}
                      className="input"
                    >
                      <option value="">Select a role</option>
                      {roles.map(role => (
                        <option key={role.id} value={role.id}>{role.name} - {role.description}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Azure AD ID (Optional)</label>
                    <input
                      type="text"
                      value={formData.azure_ad_id}
                      onChange={(e) => setFormData({ ...formData, azure_ad_id: e.target.value })}
                      className="input"
                      placeholder="Enter Azure AD ID"
                    />
                  </div>

                  <div className="flex justify-end space-x-3 pt-4">
                    <button
                      type="button"
                      onClick={() => {
                        setShowCreateModal(false);
                        setFormData({ name: '', email: '', role_id: '', azure_ad_id: '', status: 'active' });
                      }}
                      className="btn btn-secondary btn-md"
                    >
                      Cancel
                    </button>
                    <button type="submit" className="btn btn-primary btn-md">
                      Create User
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}

        {/* Edit User Modal */}
        {showEditModal && selectedUser && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
              <div className="mt-3">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Edit User</h3>
                <form onSubmit={handleUpdateUser} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                    <input
                      type="text"
                      required
                      value={formData.name}
                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                      className="input"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                    <input
                      type="email"
                      required
                      value={formData.email}
                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                      className="input"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                    <select
                      required
                      value={formData.role_id}
                      onChange={(e) => setFormData({ ...formData, role_id: e.target.value })}
                      className="input"
                    >
                      {roles.map(role => (
                        <option key={role.id} value={role.id}>{role.name} - {role.description}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                    <select
                      value={formData.status}
                      onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                      className="input"
                    >
                      <option value="active">Active</option>
                      <option value="disabled">Disabled</option>
                      <option value="suspended">Suspended</option>
                    </select>
                  </div>

                  <div className="flex justify-end space-x-3 pt-4">
                    <button
                      type="button"
                      onClick={() => {
                        setShowEditModal(false);
                        setSelectedUser(null);
                        setFormData({ name: '', email: '', role_id: '', azure_ad_id: '', status: 'active' });
                      }}
                      className="btn btn-secondary btn-md"
                    >
                      Cancel
                    </button>
                    <button type="submit" className="btn btn-primary btn-md">
                      Update User
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}

        {/* Delete Confirmation Modal */}
        {showDeleteModal && selectedUser && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
              <div className="mt-3 text-center">
                <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                  <Trash2 className="h-6 w-6 text-red-600" />
                </div>
                <h3 className="text-lg font-medium text-gray-900 mt-2">Delete User</h3>
                <div className="mt-2 px-7 py-3">
                  <p className="text-sm text-gray-500">
                    Are you sure you want to delete <strong>{selectedUser.name}</strong>?
                    This will set their status to disabled and they won't be able to access the system.
                  </p>
                </div>
                <div className="flex justify-center space-x-3 pt-4">
                  <button
                    onClick={() => {
                      setShowDeleteModal(false);
                      setSelectedUser(null);
                    }}
                    className="btn btn-secondary btn-md"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleDeleteUser}
                    className="btn bg-red-600 hover:bg-red-700 text-white btn-md"
                  >
                    Delete User
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* View User Details Modal */}
        {showViewModal && selectedUser && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div className="relative top-10 mx-auto p-5 border w-2xl max-w-2xl shadow-lg rounded-md bg-white">
              <div className="mt-3">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-medium text-gray-900">User Details</h3>
                  <button
                    onClick={() => {
                      setShowViewModal(false);
                      setSelectedUser(null);
                    }}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    ×
                  </button>
                </div>

                <div className="space-y-6">
                  {/* Basic Info */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Name</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedUser.name}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Email</label>
                      <p className="mt-1 text-sm text-gray-900">{selectedUser.email}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Role</label>
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getRoleColor(selectedUser.role_name)}`}>
                        {selectedUser.role_name}
                      </span>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Status</label>
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(selectedUser.status)}`}>
                        {selectedUser.status}
                      </span>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Created</label>
                      <p className="mt-1 text-sm text-gray-900">{formatDate(selectedUser.created_at)}</p>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Last Activity</label>
                      <p className="mt-1 text-sm text-gray-900">
                        {selectedUser.last_activity ? formatDate(selectedUser.last_activity) : 'Never'}
                      </p>
                    </div>
                  </div>

                  {/* Statistics */}
                  <div>
                    <h4 className="text-sm font-medium text-gray-700 mb-3">Activity Statistics</h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="bg-gray-50 p-3 rounded">
                        <div className="text-lg font-semibold text-gray-900">{selectedUser.total_assignments || 0}</div>
                        <div className="text-xs text-gray-500">Total Assignments</div>
                      </div>
                      <div className="bg-gray-50 p-3 rounded">
                        <div className="text-lg font-semibold text-gray-900">{selectedUser.completed_assignments || 0}</div>
                        <div className="text-xs text-gray-500">Completed</div>
                      </div>
                      <div className="bg-gray-50 p-3 rounded">
                        <div className="text-lg font-semibold text-gray-900">{selectedUser.total_containers || 0}</div>
                        <div className="text-xs text-gray-500">Total Containers</div>
                      </div>
                      <div className="bg-gray-50 p-3 rounded">
                        <div className="text-lg font-semibold text-gray-900">{selectedUser.running_containers || 0}</div>
                        <div className="text-xs text-gray-500">Running Now</div>
                      </div>
                    </div>
                  </div>

                  {/* Recent Activities */}
                  {selectedUser.recent_activities && selectedUser.recent_activities.length > 0 && (
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 mb-3">Recent Activities</h4>
                      <div className="space-y-2 max-h-40 overflow-y-auto">
                        {selectedUser.recent_activities.map((activity, index) => (
                          <div key={index} className="flex items-center space-x-3 text-sm">
                            <Activity className="h-4 w-4 text-gray-400" />
                            <span className="text-gray-600">{activity.action}</span>
                            <span className="text-gray-400">{activity.target_type}</span>
                            <span className="text-gray-400 text-xs">{formatDate(activity.created_at)}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}

========================================
PAGES - USER
========================================


--- user/dashboard.js ---

// pages/user/dashboard.js
import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import axios from 'axios';
import { 
  BookOpen, 
  Clock, 
  CheckCircle, 
  Play, 
  User, 
  Calendar,
  Server,
  Activity,
  FileText,
  Terminal,
  Container,
  Settings,
  LogOut,
  Bell,
  TrendingUp
} from 'lucide-react';

export default function UserDashboard() {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [stats, setStats] = useState({
    my_assignments: 0,
    pending_tasks: 0,
    completed_tasks: 0,
    in_progress_tasks: 0
  });
  const [recentTasks, setRecentTasks] = useState([]);
  const [loading, setLoading] = useState(true);

  // Check authentication
  useEffect(() => {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      router.push('/auth/login');
      return;
    }

    const parsedUser = JSON.parse(userData);
    if (parsedUser.role === 'admin' || parsedUser.role === 'manager') {
      router.push('/admin/dashboard');
      return;
    }

    setUser(parsedUser);
    fetchUserStats();
    fetchRecentTasks();
  }, []);

  const fetchUserStats = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('/api/user/test', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setStats(response.data.stats);
      }
    } catch (error) {
      console.error('Error fetching user stats:', error);
    }
  };

  const fetchRecentTasks = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('/api/tasks/my-tasks', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (response.data.success) {
        setRecentTasks(response.data.data.slice(0, 5)); // Get latest 5 tasks
      }
    } catch (error) {
      console.error('Error fetching recent tasks:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    router.push('/auth/login');
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'assigned': return 'text-yellow-600 bg-yellow-100';
      case 'in_progress': return 'text-blue-600 bg-blue-100';
      case 'completed': return 'text-green-600 bg-green-100';
      case 'blocked': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'assigned': return <Clock className="h-4 w-4" />;
      case 'in_progress': return <Play className="h-4 w-4" />;
      case 'completed': return <CheckCircle className="h-4 w-4" />;
      case 'blocked': return <Activity className="h-4 w-4" />;
      default: return <Clock className="h-4 w-4" />;
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner h-8 w-8 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Dashboard - ParkarLabs</title>
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <div className="bg-white shadow">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center space-x-4">
                <Link href="/" className="text-xl font-bold text-blue-600">
                  ParkarLabs
                </Link>
                <span className="text-gray-400">|</span>
                <span className="text-gray-600">Employee Dashboard</span>
              </div>

              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <User className="h-5 w-5 text-gray-400" />
                  <span className="text-gray-700">{user?.name}</span>
                </div>
                <button
                  onClick={handleLogout}
                  className="text-gray-600 hover:text-gray-900"
                >
                  <LogOut className="h-5 w-5" />
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Welcome Section */}
          <div className="mb-8">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              Welcome back, {user?.name}!
            </h1>
            <p className="text-gray-600">
              Here's your personal workspace for managing tasks and accessing lab environments.
            </p>
          </div>

          {/* Stats Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="stat-label">My Assignments</p>
                  <p className="stat-value">{stats.my_assignments}</p>
                  <p className="text-xs text-gray-500 mt-1">Total assigned</p>
                </div>
                <div className="p-3 bg-blue-100 rounded-lg">
                  <FileText className="h-6 w-6 text-blue-600" />
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="stat-label">Pending Tasks</p>
                  <p className="stat-value">{stats.pending_tasks}</p>
                  <p className="text-xs text-gray-500 mt-1">Awaiting action</p>
                </div>
                <div className="p-3 bg-yellow-100 rounded-lg">
                  <Clock className="h-6 w-6 text-yellow-600" />
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="stat-label">In Progress</p>
                  <p className="stat-value">{stats.in_progress_tasks}</p>
                  <p className="text-xs text-gray-500 mt-1">Currently working</p>
                </div>
                <div className="p-3 bg-orange-100 rounded-lg">
                  <Play className="h-6 w-6 text-orange-600" />
                </div>
              </div>
            </div>

            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="stat-label">Completed</p>
                  <p className="stat-value">{stats.completed_tasks}</p>
                  <p className="text-xs text-gray-500 mt-1">Finished tasks</p>
                </div>
                <div className="p-3 bg-green-100 rounded-lg">
                  <CheckCircle className="h-6 w-6 text-green-600" />
                </div>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Quick Actions */}
            <div className="lg:col-span-1">
              <div className="card p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
                <div className="space-y-3">
                  <button 
                    onClick={() => router.push('/user/tasks')}
                    className="w-full btn btn-primary btn-md flex items-center justify-center"
                  >
                    <FileText className="h-4 w-4 mr-2" />
                    View My Tasks
                  </button>
                  
                  <button 
                    onClick={() => router.push('/user/courses')}
                    className="w-full btn btn-outline btn-md flex items-center justify-center"
                  >
                    <BookOpen className="h-4 w-4 mr-2" />
                    My Courses
                  </button>
                  
                  <button 
                    onClick={() => router.push('/user/containers')}
                    className="w-full btn btn-outline btn-md flex items-center justify-center"
                  >
                    <Container className="h-4 w-4 mr-2" />
                    My Containers
                  </button>
                  
                  <button 
                    onClick={() => router.push('/user/profile')}
                    className="w-full btn btn-ghost btn-md flex items-center justify-center"
                  >
                    <Settings className="h-4 w-4 mr-2" />
                    Profile Settings
                  </button>
                </div>
              </div>

              {/* Performance Summary */}
              <div className="card p-6 mt-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance</h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-600">Completion Rate</span>
                    <span className="text-sm font-medium">
                      {stats.my_assignments > 0 
                        ? Math.round((stats.completed_tasks / stats.my_assignments) * 100)
                        : 0}%
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-green-600 h-2 rounded-full" 
                      style={{
                        width: `${stats.my_assignments > 0 
                          ? (stats.completed_tasks / stats.my_assignments) * 100 
                          : 0}%`
                      }}
                    ></div>
                  </div>
                  
                  <div className="flex items-center justify-between pt-2">
                    <span className="text-sm text-gray-600">Active Tasks</span>
                    <span className="text-sm font-medium">{stats.in_progress_tasks}</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Recent Tasks */}
            <div className="lg:col-span-2">
              <div className="card p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold text-gray-900">Recent Tasks</h3>
                  <Link 
                    href="/user/tasks"
                    className="text-sm text-blue-600 hover:text-blue-800 font-medium"
                  >
                    View all tasks →
                  </Link>
                </div>

                {recentTasks.length > 0 ? (
                  <div className="space-y-4">
                    {recentTasks.map((task) => (
                      <div key={task.assignment_id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-medium text-gray-900">{task.title}</h4>
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(task.status)}`}>
                            {getStatusIcon(task.status)}
                            <span className="ml-1 capitalize">{task.status.replace('_', ' ')}</span>
                          </span>
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-3">{task.description}</p>
                        
                        <div className="flex items-center justify-between">
                          <div className="flex items-center text-xs text-gray-500 space-x-4">
                            <span className="flex items-center">
                              <User className="h-3 w-3 mr-1" />
                              {task.assigned_by_name}
                            </span>
                            <span className="flex items-center">
                              <Calendar className="h-3 w-3 mr-1" />
                              {new Date(task.assigned_at).toLocaleDateString()}
                            </span>
                            {task.course_title && (
                              <span className="flex items-center">
                                <BookOpen className="h-3 w-3 mr-1" />
                                {task.course_title}
                              </span>
                            )}
                          </div>
                          
                          {task.status === 'assigned' && (
                            <button 
                              onClick={() => router.push('/user/tasks')}
                              className="text-xs text-blue-600 hover:text-blue-800 font-medium"
                            >
                              Start Task →
                            </button>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <FileText className="h-8 w-8 text-gray-400 mx-auto mb-3" />
                    <p className="text-gray-600">No tasks assigned yet</p>
                    <p className="text-sm text-gray-500">Check back later for new assignments</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

--- user/tasks.js ---

// pages/user/tasks.js
import { useState, useEffect } from 'react';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import axios from 'axios';
import dynamic from 'next/dynamic';
import {
  CheckCircle,
  Clock,
  Play,
  Calendar,
  BookOpen,
  ChevronRight,
  Search,
  Server,
  User,
  AlertCircle,
  FileText,
  ExternalLink,
  Rocket,
  X
} from 'lucide-react';

// dynamic import for SSR safety
const WebSSH = dynamic(() => import('../../components/WebSSH'), { ssr: false });

export default function UserTasks() {
  const router = useRouter();
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [showDependencyModal, setShowDependencyModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [selectedDependencies, setSelectedDependencies] = useState([]);

  const [availableDependencies] = useState([
    { id: 'node', name: 'Node.js', version: '20.x' },
    { id: 'mongodb', name: 'MongoDB', version: '7.0' },
    { id: 'postgresql', name: 'PostgreSQL', version: '16' },
    { id: 'redis', name: 'Redis', version: '7.2' },
    { id: 'nginx', name: 'Nginx', version: 'latest' },
    { id: 'docker', name: 'Docker', version: 'latest' }
  ]);

  const [stats, setStats] = useState({ total: 0, assigned: 0, inProgress: 0, completed: 0 });

  // Launching states & results
  const [launching, setLaunching] = useState(false);
  const [launchError, setLaunchError] = useState(null);
  const [sshInfo, setSshInfo] = useState(null); // { containerId, lxcName }

  // read token once per render (defensive for SSR)
  const token = (typeof window !== 'undefined') ? localStorage.getItem('token') : null;

  useEffect(() => {
    const t = (typeof window !== 'undefined') ? localStorage.getItem('token') : null;
    if (!t) {
      router.push('/auth/login');
      return;
    }
    fetchMyTasks();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const fetchMyTasks = async () => {
    try {
      setLoading(true);
      const t = (typeof window !== 'undefined') ? localStorage.getItem('token') : null;
      const response = await axios.get('/api/tasks/my-tasks', {
        headers: { Authorization: `Bearer ${t}` }
      });
      if (response.data?.success) {
        setTasks(response.data.data || []);
        calculateStats(response.data.data || []);
      }
    } catch (error) {
      console.error('Error fetching tasks:', error);
    } finally {
      setLoading(false);
    }
  };

  const calculateStats = (tasksData) => {
    const stats = {
      total: tasksData.length,
      assigned: tasksData.filter(t => t.status === 'assigned').length,
      inProgress: tasksData.filter(t => t.status === 'in_progress').length,
      completed: tasksData.filter(t => t.status === 'completed').length
    };
    setStats(stats);
  };

  const handleLaunchLab = (task) => {
    setSelectedTask(task);
    setSelectedDependencies([]);
    setShowDependencyModal(true);
    setLaunchError(null);
  };

  const launchContainer = async () => {
    try {
      setLaunching(true);
      setLaunchError(null);

      const t = (typeof window !== 'undefined') ? localStorage.getItem('token') : null;
      if (!t) throw new Error('Not authenticated');

      // Generate container name from task title
      const containerName = (selectedTask?.title || 'lab').toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-|-$/g, '')
        .substring(0, 50);

      const containerData = {
        name: containerName,
        taskId: selectedTask?.task_id,
        assignmentId: selectedTask?.assignment_id,
        image: 'ubuntu:24.04',
        cpu: 2,
        memory: 2048,
        storage: 20480,
        dependencies: selectedDependencies
      };

      const response = await axios.post('/api/containers/launch', containerData, {
        headers: { Authorization: `Bearer ${t}` }
      });

      if (response.data?.success) {
        // IMPORTANT: the frontend should NOT receive sensitive SSH creds.
        // Keep only containerId + friendly name (lxcName) for UI/WS handshake.
        const container = response.data.container || {};
        const containerId = container.id || null;
        const lxcName = container.name || containerId || 'lab-container';

        if (!containerId) {
          // launched but server didn't return container id
          setLaunchError('Launched but server did not return container id.');
          alert('Launch succeeded but response missing container id; please contact admin.');
        } else {
          // set only minimal sshInfo (containerId) - the server will resolve IP and do SSH server-side
          setSshInfo({ containerId, lxcName });
          setShowDependencyModal(false);
          setSelectedTask(null);
          setSelectedDependencies([]);
          // refresh task list to pick up any container metadata
          fetchMyTasks();
        }
      } else {
        const msg = response.data?.message || 'Unknown error';
        setLaunchError(msg);
        alert('Error launching container: ' + msg);
      }
    } catch (error) {
      console.error('Error launching container:', error);
      const msg = error.response?.data?.message || error.message || 'Unknown error';
      setLaunchError(msg);
      alert('Error launching container: ' + msg);
    } finally {
      setLaunching(false);
    }
  };

  const filteredTasks = tasks.filter(task => {
    const searchLower = searchTerm.toLowerCase();
    const matchesSearch = (task.title || '').toLowerCase().includes(searchLower) ||
      (task.description || '').toLowerCase().includes(searchLower);
    if (statusFilter === 'all') return matchesSearch;
    return matchesSearch && task.status === statusFilter;
  });

  const getStatusColor = (status) => {
    switch (status) {
      case 'assigned': return 'text-yellow-600 bg-yellow-100';
      case 'in_progress': return 'text-blue-600 bg-blue-100';
      case 'completed': return 'text-green-600 bg-green-100';
      case 'blocked': return 'text-red-600 bg-red-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'assigned': return <Clock className="h-4 w-4" />;
      case 'in_progress': return <Play className="h-4 w-4" />;
      case 'completed': return <CheckCircle className="h-4 w-4" />;
      case 'blocked': return <AlertCircle className="h-4 w-4" />;
      default: return <Clock className="h-4 w-4" />;
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'No due date';
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric', month: 'short', day: 'numeric'
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner h-8 w-8 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your tasks...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head><title>My Tasks - ParkarLabs</title></Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <div className="bg-white shadow">
          <div className="container mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <div className="flex items-center space-x-4">
                <Link href="/user/dashboard" className="text-gray-600 hover:text-gray-900">Dashboard</Link>
                <ChevronRight className="h-4 w-4 text-gray-400" />
                <span className="text-gray-900 font-medium">My Tasks</span>
              </div>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div><p className="stat-label">Total Tasks</p><p className="stat-value">{stats.total}</p></div>
                <div className="p-3 bg-blue-100 rounded-lg"><FileText className="h-6 w-6 text-blue-600" /></div>
              </div>
            </div>
            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div><p className="stat-label">Assigned</p><p className="stat-value">{stats.assigned}</p></div>
                <div className="p-3 bg-yellow-100 rounded-lg"><Clock className="h-6 w-6 text-yellow-600" /></div>
              </div>
            </div>
            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div><p className="stat-label">In Progress</p><p className="stat-value">{stats.inProgress}</p></div>
                <div className="p-3 bg-blue-100 rounded-lg"><Play className="h-6 w-6 text-blue-600" /></div>
              </div>
            </div>
            <div className="stat-card">
              <div className="flex items-center justify-between">
                <div><p className="stat-label">Completed</p><p className="stat-value">{stats.completed}</p></div>
                <div className="p-3 bg-green-100 rounded-lg"><CheckCircle className="h-6 w-6 text-green-600" /></div>
              </div>
            </div>
          </div>

          {/* Search & Filters */}
          <div className="card p-6 mb-6">
            <div className="flex flex-col sm:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <input type="text" placeholder="Search tasks..." className="input pl-10" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} />
                </div>
              </div>

              <div className="flex gap-4">
                <select className="input" value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>
                  <option value="all">All Status</option>
                  <option value="assigned">Assigned</option>
                  <option value="in_progress">In Progress</option>
                  <option value="completed">Completed</option>
                  <option value="blocked">Blocked</option>
                </select>
              </div>
            </div>
          </div>

          {/* Tasks List */}
          <div className="space-y-6">
            {filteredTasks.map(task => (
              <div key={task.assignment_id} className="card hover:shadow-medium transition-shadow">
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-lg font-semibold text-gray-900">{task.title}</h3>
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(task.status)}`}>
                          {getStatusIcon(task.status)}
                          <span className="ml-1 capitalize">{(task.status || '').replace('_', ' ')}</span>
                        </span>
                      </div>

                      <p className="text-gray-600 mb-3">{task.description}</p>

                      <div className="flex items-center gap-4 text-sm text-gray-500">
                        <span className="flex items-center"><User className="h-4 w-4 mr-1" />Assigned by: {task.assigned_by_name}</span>
                        <span className="flex items-center"><Calendar className="h-4 w-4 mr-1" />Due: {formatDate(task.due_date)}</span>
                        {task.course_title && (
                          <span className="flex items-center"><BookOpen className="h-4 w-4 mr-1" />Course: {task.course_title}</span>
                        )}
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                    <div className="flex items-center gap-4">
                      <span className="text-sm text-gray-500">Assigned: {new Date(task.assigned_at).toLocaleDateString()}</span>
                      {task.course_slug && (
                        <Link href={`/user/courses/${task.course_slug}`} className="text-sm text-blue-600 hover:text-blue-800 flex items-center">
                          <ExternalLink className="h-4 w-4 mr-1" /> View Course
                        </Link>
                      )}
                    </div>

                    <div className="flex items-center space-x-3">
                      <button
                        onClick={() => handleLaunchLab(task)}
                        className="btn btn-primary btn-md inline-flex items-center"
                        disabled={launching}
                        aria-disabled={launching}
                      >
                        <Rocket className="h-4 w-4 mr-2" /> Launch Lab
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {filteredTasks.length === 0 && (
            <div className="text-center py-12">
              <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No tasks assigned</h3>
              <p className="text-gray-600">You don't have any tasks assigned yet. Check back later!</p>
            </div>
          )}
        </div>

        {/* Dependency Modal */}
        {showDependencyModal && selectedTask && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-2xl w-full">
              <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
                <h3 className="text-lg font-semibold text-gray-900">Configure Lab</h3>
                <button onClick={() => { setShowDependencyModal(false); setSelectedTask(null); setSelectedDependencies([]); }} className="p-1 rounded hover:bg-gray-100"><X /></button>
              </div>

              <div className="px-6 py-6">
                <div className="mt-6">
                  <label className="block text-sm font-medium text-gray-700 mb-3">Select Dependencies</label>
                  <div className="grid grid-cols-2 gap-4">
                    {availableDependencies.map((dep) => (
                      <label key={dep.id} className="flex items-start p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
                        <input
                          type="checkbox"
                          className="mt-1 mr-3 h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                          checked={selectedDependencies.includes(dep.id)}
                          onChange={(e) => {
                            if (e.target.checked) setSelectedDependencies(prev => [...prev, dep.id]);
                            else setSelectedDependencies(prev => prev.filter(id => id !== dep.id));
                          }}
                        />
                        <div className="flex-1">
                          <span className="text-sm font-medium text-gray-900">{dep.name}</span>
                          <p className="text-xs text-gray-500">{dep.version}</p>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                {launchError && (
                  <div className="mt-4 p-3 bg-red-50 text-red-700 rounded">
                    {launchError}
                  </div>
                )}
              </div>

              <div className="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3 bg-gray-50">
                <button onClick={() => { setShowDependencyModal(false); setSelectedTask(null); setSelectedDependencies([]); }} className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50">Cancel</button>
                <button onClick={launchContainer} className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 inline-flex items-center" disabled={launching}>
                  <Server className="h-4 w-4 mr-2" /> {launching ? 'Launching...' : 'Launch Lab'}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* WebSSH Terminal show/hide area */}
        {sshInfo && (
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="card p-4">
              <div className="flex justify-between items-center mb-3">
                <h4 className="text-lg font-medium">Web SSH Terminal</h4>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-gray-500 mr-2">Container: {sshInfo.lxcName || sshInfo.containerId}</span>
                  <button onClick={() => setSshInfo(null)} className="px-2 py-1 text-sm rounded border">Close</button>
                </div>
              </div>

              {/* pass only containerId + token */}
              <WebSSH containerId={sshInfo.containerId} token={token} height={480} />
            </div>
          </div>
        )}
      </div>
    </>
  );
}

========================================
STYLES
========================================


--- globals.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import Inter font from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;700&display=swap');

/* Base styles */
@layer base {
  * {
    @apply border-gray-200;
  }
  body {
    @apply bg-white text-gray-900 font-sans;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
  html {
    @apply scroll-smooth;
  }
}

/* Component styles */
@layer components {
  /* Button variants */
  .btn {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50;
  }
  
  .btn-primary {
    @apply btn bg-blue-600 text-white hover:bg-blue-700 active:bg-blue-800;
  }
  
  .btn-secondary {
    @apply btn bg-gray-100 text-gray-900 hover:bg-gray-200 active:bg-gray-300;
  }
  
  .btn-outline {
    @apply btn border border-blue-300 bg-transparent text-blue-700 hover:bg-blue-50 active:bg-blue-100;
  }
  
  .btn-ghost {
    @apply btn bg-transparent text-gray-700 hover:bg-gray-100 active:bg-gray-200;
  }
  
  .btn-sm {
    @apply h-8 px-3 text-xs;
  }
  
  .btn-md {
    @apply h-10 px-4 text-sm;
  }
  
  .btn-lg {
    @apply h-12 px-6 text-base;
  }

  /* Input styles */
  .input {
    @apply flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50;
  }

  /* Card styles */
  .card {
    @apply rounded-lg border border-gray-200 bg-white shadow-sm;
  }
  
  .card-header {
    @apply space-y-1.5 p-6 pb-4;
  }
  
  .card-content {
    @apply p-6 pt-0;
  }
  
  .card-footer {
    @apply flex items-center p-6 pt-4;
  }

  /* Layout styles */
  .container {
    @apply mx-auto max-w-7xl px-4 sm:px-6 lg:px-8;
  }
  
  .page-header {
    @apply mb-8 border-b border-gray-200 pb-5;
  }
  
  .page-title {
    @apply text-3xl font-bold leading-tight tracking-tight text-gray-900;
  }
  
  .page-description {
    @apply mt-2 text-lg text-gray-600;
  }

  /* Status indicators */
  .status-dot {
    @apply inline-block h-2 w-2 rounded-full;
  }
  
  .status-active {
    @apply bg-green-500;
  }
  
  .status-inactive {
    @apply bg-gray-400;
  }
  
  .status-error {
    @apply bg-red-500;
  }
  
  .status-warning {
    @apply bg-yellow-500;
  }

  /* Loading states */
  .skeleton {
    @apply animate-pulse bg-gray-200 rounded;
  }
  
  .spinner {
    @apply animate-spin rounded-full border-2 border-gray-300 border-t-blue-600;
  }

  /* Terminal styles */
  .terminal {
    @apply bg-gray-900 text-green-400 font-mono text-sm rounded-md p-4 overflow-auto;
  }
  
  .terminal-prompt {
    @apply text-blue-400;
  }

  /* Dashboard grid */
  .dashboard-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6;
  }
  
  .stat-card {
    @apply card p-6 hover:shadow-md transition-shadow;
  }
  
  .stat-value {
    @apply text-2xl font-bold text-gray-900;
  }
  
  .stat-label {
    @apply text-sm font-medium text-gray-600;
  }
  
  .stat-change {
    @apply text-xs font-medium;
  }
  
  .stat-change.positive {
    @apply text-green-600;
  }
  
  .stat-change.negative {
    @apply text-red-600;
  }
}

/* Utility classes */
@layer utilities {
  .text-gradient {
    @apply bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent;
  }
  
  .gradient-bg {
    @apply bg-gradient-to-r from-blue-500 to-blue-700;
  }
  
  .glass {
    @apply bg-white/70 backdrop-blur-sm border border-white/20;
  }
  
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
}
